-- TO PRINT THE OUTPUT, FIRST RUN THIS
SET SERVEROUTPUT ON;

-- PROCEDURE BEGINS
BEGIN
  SYS.dbms_output.put_line('HELLO');
END;

-- BLOCK INSIDE BLOCK
BEGIN 
  DBMS_OUTPUT.PUT_LINE('HELLO');
  BEGIN
    DBMS_OUTPUT.PUT_LINE('WORLD');
  END;
END;


-- SHORTEST CODE
BEGIN
NULL;
END;

/*
VARIABLES
1. SCALAR
2. REFERENCE
3. LARGE OBJECTS
4. COMPOSITE

SCALAR
```````
:CHAR(MAX_LENGTH)
:VARCHAR2(MAX_LENGTH)
:NUMBER[PRECISION, SALE]
:BINARY_INTEGER = PLSINTEGER
:BINARY_FLOAT   //EXAMPLE 1.9234F
:BINARY_DOUBLE //9 BIT VALUE
:BOOLEAN //BY DEFAULT IS NULL
:DATE
:TIMESTAMP(PRECISION)
:TIMESTAMP(PRECISION) WITH TIME ZONE
:TIMESTAMP(PRECISION) WITH LOCAL TIME ZONE
::INTERVAL (PRECISION) DAY TO SECOND(PRECISION)
:INTERVAL (PRECISION) YEAR TO MONTH
*/

DECLARE
  V_TEXT VARCHAR(50) NOT NULL DEFAULT 'HELLO WORLD'; 
BEGIN
  V_TEXT := 'PL_SQL';   -- WE CAN CHANGE THE VALUE BY USING ASSIGNMENT OPERATOR I.E. :=
  DBMS_OUTPUT.PUT_LINE(V_TEXT);
END;

DECLARE
  V_TEXT VARCHAR(50) NOT NULL DEFAULT 'HELLO, '; 
BEGIN
  V_TEXT := V_TEXT || 'PL_SQL'||' DEVELOPER';   -- FOR CONCATENATION I.E. ||
  DBMS_OUTPUT.PUT_LINE(V_TEXT);
END;

DECLARE
  V_TEXT NUMBER NOT NULL := 50; 
  V_TEXT1 NUMBER(2) NOT NULL := 50.42;  --THIS WILL REMOVE THE DECIMAL PLACES, MEANS ANS WILL BE 50
  --V_TEXT3 NUMBER(3,2) NOT NULL := 50.42  -- THIS WILL SHOW ERROR BCOZ 3 IS LESS THAN THE TOTAL PLACES OF NUMBER WHICH IS 4
  V_TEXT2 NUMBER(4,1) NOT NULL := 50.42;  --(4,2) MEANS (TOTAL PLACES, TOTAL DECIMAL PLACES) TOTAL PLACES IS 4 AND IT CANNOT BE LESS THAN ACTUAL PLACES OF THE NUMBER, WE CAN PLACE AROUND THE PRECISION VALUE
BEGIN
  DBMS_OUTPUT.PUT_LINE(V_TEXT);
  DBMS_OUTPUT.PUT_LINE(V_TEXT1);
  DBMS_OUTPUT.PUT_LINE(V_TEXT2);
END;

DECLARE
  V_TEXT PLS_INTEGER NOT NULL := 50;
  V_TEXT1 BINARY_FLOAT NOT NULL := 50.42F;
  V_DATE DATE :=SYSDATE;
  V_DATE1 DATE := '22-NOV-21 14:02:34';
  V_DATE2 DATE := '22/NOV/21';
  V_DATE3 TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;
  V_DATE4 TIMESTAMP(3) WITH TIME ZONE:= SYSTIMESTAMP;
  V_DATE5 INTERVAL YEAR TO MONTH := '21-10';    -- BY DEFAULT PRECISION IS 2
  V_DATE6 INTERVAL YEAR(4) TO MONTH := '2021-10';
  V_BOOL BOOLEAN := TRUE;
BEGIN
  DBMS_OUTPUT.PUT_LINE(V_TEXT);
  DBMS_OUTPUT.PUT_LINE(V_TEXT1);
  DBMS_OUTPUT.PUT_LINE(V_DATE);
  DBMS_OUTPUT.PUT_LINE(V_DATE1);
  DBMS_OUTPUT.PUT_LINE(V_DATE2);
  DBMS_OUTPUT.PUT_LINE(V_DATE3);
  DBMS_OUTPUT.PUT_LINE(V_DATE4);
  DBMS_OUTPUT.PUT_LINE(V_DATE5);
  DBMS_OUTPUT.PUT_LINE(V_DATE6);
  --DBMS_OUTPUT.PUT_LINE(V_BOOL);
  DBMS_OUTPUT.PUT_LINE(SYS.DIUTIL.BOOL_TO_INT( V_BOOL));
END;

-- %type 
--if we do not know the data type of the coloumn from a database then we use '%type' keyword to use the same data type that is used in database
DESC EMPLOYEES;
SELECT * FROM EMPLOYEES;

SET SERVEROUTPUT ON;
DECLARE 
  V_TYPE EMPLOYEES.EMAIL%TYPE;    -- WE ARE USING DATATYPE OF EMAIL 
  V_TYPE2 V_TYPE%TYPE;            -- WE ARE USING DATATYPE OF V_TYPE THAT IS SIMILAR TO EMAIL WHICH IS VARCHAR(25)
BEGIN
  V_TYPE := 'JKING';              --ASSIGNING A VALUE TO A VARIABLE
  SELECT FIRST_NAME INTO V_TYPE2 FROM EMPLOYEES WHERE EMAIL LIKE V_TYPE;  --PUTTING THE FIRSTNAME IN V_TYPE2 OF SIMILAR EMAIL TO V_TYPE
  DBMS_OUTPUT.PUT_LINE(V_TYPE2);
END;

-- SELECT THE CODE AND PRESS F7 TO GET INDENTATED CODE
DECLARE
  V_OUTER VARCHAR2(50):='OUTER';
BEGIN -- THIS IS OUTER BEGIN
  DECLARE
    V_INNER VARCHAR2(10):='INNER';  --V_INNER VARIABLE SCOPE BEGINS HERE
  BEGIN  --THIS IS INNER BEGIN
    DBMS_OUTPUT.PUT_LINE(V_INNER);
    DBMS_OUTPUT.PUT_LINE(V_OUTER);
  END;    -- V_INNER VARIABLE SCOPE ENDS HERE
  --DBMS.OUTPUT_PUT_LINE(V_INNER);    --THIS WILLSHOW ERROR AS V_INNER IS NOT AVAILABLE IN THIS BLOCK.
  DBMS_OUTPUT.PUT_LINE(V_OUTER);
END;  -- V-OUTER VARIABLE SCOPE ENDS HERE


--BIND VARIABLES
/*
-INCREASES PERFORMANCE
-SCOPE IS WHOLE SHEET
-CREATE HOST ENV
*/
SET SERVEROUTPUT ON;
SET AUTOPRINT ON; -- IF YOU RUN THIS THEN WHERE EVER WE HAVE USED BIND VARIABLE, IT WILL PRINT THE VALUE OF IT.

VARIABLE V_TEXT VARCHAR2(20);
DECLARE 
  V_TYPE VARCHAR2(20);
BEGIN
  :V_TEXT := 'HELLO WORLD';
   V_TYPE := :V_TEXT;
  DBMS_OUTPUT.PUT_LINE(:V_TEXT);
  DBMS_OUTPUT.PUT_LINE(V_TYPE);
END;
PRINT V_TEXT;

VARIABLE VAR_SQL NUMBER;

BEGIN 
  :VAR_SQL := 100;
END;
PRINT VAR_SQL;
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = :VAR_SQL;












