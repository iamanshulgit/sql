/*
CONTROL STATEMENTS
-IF STATEMENT
syntax:-
  IF condition THEN statements;
  [ELSEIF condition THEN statements;]
  [ELSE statements;]
  END IF;
*/ 
SET SERVEROUTPUT ON;

DECLARE 
  V_NUMBER NUMBER := 10;  -- IF VALUE IS NULL OR NOT ASSIGNED THE ELSE BLOCK IS CALLED
  V_NAME VARCHAR2(30) := 'AMMU';
BEGIN
  IF V_NUMBER > 30 AND V_NAME = 'ANSHUL' THEN
    DBMS_OUTPUT.PUT_LINE('I AM GREATER THAN 30');
  ELSIF V_NUMBER > 20 OR V_NAME = 'AMMU' THEN
    DBMS_OUTPUT.PUT_LINE('I AM GREATER THAN 20 BUT LESS THAN 30');
  ELSIF V_NUMBER > 10 THEN
    DBMS_OUTPUT.PUT_LINE('I AM GREATER THAN 10 BUT LESS THAN 20');
  ELSIF V_NUMBER = 10 THEN
    DBMS_OUTPUT.PUT_LINE('I AM EQUAL TO 10');
  ELSIF V_NUMBER < 10 THEN
    DBMS_OUTPUT.PUT_LINE('I AM LESS THAN 10');
  ELSE
    DBMS_OUTPUT.PUT_LINE('VALUE IS NULL OR NOT ASSIGNED');
  END IF;
END;

-- CASE
/*
--all the condition/expression should be aof same data type.
SYNTAX:-
  CASE [expression || condition]
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
      ::::::::
    ELSE result
  END;
*/
SET SERVEROUTPUT ON;

DECLARE 
  V_JOB_CODE VARCHAR2(30) := 'SA_EEE';
  V_SALARY_INCREASE NUMBER;
BEGIN
  V_SALARY_INCREASE := CASE V_JOB_CODE
          WHEN 'SA_MAN' THEN 0.2
          WHEN 'SA_REP' THEN 0.3
          ELSE 0
          END;
  DBMS_OUTPUT.PUT_LINE('INCREASED SALARY IS ' || V_SALARY_INCREASE);
END;
  
DECLARE 
  V_JOB_CODE VARCHAR2(30) := 'SA_PM';
  V_DEPARTMENT_ID NUMBER := 10001;
  V_SALARY_INCREASE NUMBER;
BEGIN
  V_SALARY_INCREASE := CASE 
          WHEN V_JOB_CODE = 'SA_MAN' THEN 0.2
          WHEN V_JOB_CODE IN ('SA_REP','SA_IT_PROG') THEN 0.3   -- WE CAN USE MULITPLE COMPARISION
          WHEN V_JOB_CODE = 'SA_PM' AND V_DEPARTMENT_ID = 10001 THEN 0.4  -- WE CAN COMPARE DIFFERENT VARIABLES 
          ELSE 0
          END;
  DBMS_OUTPUT.PUT_LINE('INCREASED SALARY IS ' || V_SALARY_INCREASE);
END;

-- IF DO NOT WANT TO ASSIGN ANY VALUE DIRECTLY // IT IS SIMILAR TO IF-THEN-ELSE 
DECLARE 
  V_JOB_CODE VARCHAR2(30) := 'SA_PRM';
  V_DEPARTMENT_ID NUMBER := 10001;
  V_SALARY_INCREASE NUMBER;
  V_JOB_TITLE VARCHAR2(50);
BEGIN
  CASE 
          WHEN V_JOB_CODE = 'SA_MAN' THEN V_SALARY_INCREASE := 0.2;
            DBMS_OUTPUT.PUT_LINE('THE SALES MANAGER SALARY INCRESED BY ' || V_SALARY_INCREASE);
          WHEN V_JOB_CODE IN ('SA_REP','SA_IT_PROG') THEN V_SALARY_INCREASE := 0.3; V_JOB_TITLE := 'IT PROGRAMMER'; --MULTIPLE EXPRESSION CAN BE SEPEARTED BY ;
            DBMS_OUTPUT.PUT_LINE('THE '|| V_JOB_TITLE || ' SALARY INCRESED BY ' || V_SALARY_INCREASE);
          WHEN V_JOB_CODE = 'SA_PM' AND V_DEPARTMENT_ID = 10001 THEN V_SALARY_INCREASE := 0.4 ; V_JOB_TITLE:='PRODUCT MANAGER' ;
            DBMS_OUTPUT.PUT_LINE('THE ' || V_JOB_TITLE || ' SALARY INCRESED BY ' || V_SALARY_INCREASE);
          ELSE V_SALARY_INCREASE := 0.4; V_JOB_TITLE:='PROJECT MANAGER';
            DBMS_OUTPUT.PUT_LINE('THE ' || V_JOB_TITLE || ' SALARY INCRESED BY ' || V_SALARY_INCREASE);
          END CASE;
  --DBMS_OUTPUT.PUT_LINE('INCREASED SALARY IS ' || V_SALARY_INCREASE);
END;
  
--LOOPS
/*
-BASIC LOOPS(ALSO KNOW AS DO-WHILE-LOOP)
  SYNTAX:-
    LOOP
      //your code
      Exit [WHEN condition]
    END LOOP;
*/
declare
  V_COUNTER number(3) := 1;
begin
  LOOP
    DBMS_OUTPUT.PUT_LINE('Counter value ' || V_COUNTER);
    V_COUNTER := V_COUNTER + 1;
    if V_COUNTER = 10 then EXIT;
    end if;
  end LOOP;
end;

DECLARE
  V_COUNTER NUMBER(3) := 1;
BEGIN
  LOOP
    DBMS_OUTPUT.PUT_LINE('Counter value ' || V_COUNTER);
    V_COUNTER := V_COUNTER + 1;
    EXIT WHEN V_COUNTER > 10;
  END LOOP;
END;

/*
WHILE LOOPS
SYNTAX:-
  WHILE condition LOOP
    your code;
  END LOOP;
*/
SET SERVEROUTPUT ON;

DECLARE
  V_COUNTER NUMBER(2) := 1;
BEGIN
  WHILE V_COUNTER < 11 LOOP
    DBMS_OUTPUT.PUT_LINE('COUNTER IS ' || V_COUNTER);
    V_COUNTER := V_COUNTER +1;
  END LOOP;
END;
  
/*
FOR LOOP
SYNTAX:-
  FOR counter IN [REVERSE]      -- reverse is optional, cannot assign the value to the counter
    lower_bound..upper_bound LOOP
    your_code;
    :::::::::::::
  END LOOP;
*/

BEGIN
  FOR I IN 1..3 LOOP
    DBMS_OUTPUT.PUT_LINE('COUNTER IS ' || I);
  END LOOP;
END;
  
BEGIN
  FOR I IN REVERSE 1..5 LOOP      -- TO REVERSE THE LOOP, WE HAVE TO USE REVERSE KEYWORD
    DBMS_OUTPUT.PUT_LINE('COUNTER IS ' || I);
  END LOOP;
END;
  
  
--NESTED LOOPS
SET  SERVEROUTPUT ON;

DECLARE
  V_INNER NUMBER := 1;
BEGIN

  FOR V_OUTER IN 1..5 LOOP
    DBMS_OUTPUT.PUT_LINE('OUTER VALUE IS '|| V_OUTER );
    V_INNER := 1;

    LOOP
      V_INNER := V_INNER + 1;
      DBMS_OUTPUT.PUT_LINE('    INNER VALUE IS '|| V_INNER);
      EXIT WHEN V_INNER*V_OUTER >= 15;
    END LOOP ;
  END LOOP ;
END;

DECLARE
  V_INNER NUMBER := 1;
BEGIN
<<OUTER_LOOP>>      --LABEL
  FOR V_OUTER IN 1..5 LOOP
    DBMS_OUTPUT.PUT_LINE('OUTER VALUE IS '|| V_OUTER );
    V_INNER := 1;
    <<INNER_LOOP>>
    LOOP
      V_INNER := V_INNER + 1;
      DBMS_OUTPUT.PUT_LINE('    INNER VALUE IS '|| V_INNER);
      EXIT OUTER_LOOP WHEN V_INNER*V_OUTER >=16;  -- IT WILL EXIT FROM OUTER LOOP IF VALUE CROSSES 16
      EXIT WHEN V_INNER*V_OUTER >= 15;
    END LOOP INNER_LOOP;
  END LOOP OUTER_LOOP;
END;
  
--CONTINUE STATEMENT
/*
WE CAN PASS TO NEXT ITERATION.
SYNTAX:-
  CONTINUE [label_name] [WHEN condition];
*/
DECLARE
  V_INNER NUMBER := 1;
BEGIN
  FOR V_OUTER IN 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE('OUTER VALUE IS '|| V_OUTER);
    V_INNER :=1;
    WHILE V_INNER*V_OUTER <15 LOOP
      V_INNER := V_INNER + 1;
      CONTINUE WHEN MOD(V_INNER*V_OUTER,3) = 0;   -- IF REMAINDER OF PRODUCT IS DIVISIBLE BY 3 THEN SKIP THE REST OF THE LOOP AND START OVER AGAIN.
      DBMS_OUTPUT.PUT_LINE('    INNER VALUE IS ' || V_INNER);
    END LOOP;
  END LOOP;
END;

DECLARE
  V_INNER NUMBER := 1;
BEGIN
<<OUTER_LOOP>>
  FOR V_OUTER IN 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE('OUTER VALUE IS '|| V_OUTER);
    V_INNER :=1;
    <<INNER_LOOP>>
    WHILE V_INNER*V_OUTER <15 LOOP
      V_INNER := V_INNER + 1;
      CONTINUE OUTER_LOOP WHEN MOD(V_INNER*V_OUTER,3) = 0;   -- IF REMAINDER OF PRODUCT IS DIVISIBLE BY 3 THEN JUMP OVER TO OUTER LOOP.
      DBMS_OUTPUT.PUT_LINE('    INNER VALUE IS ' || V_INNER);
    END LOOP;
  END LOOP;
END;

--GOTO STATEMENT
/*
-CANNOT GO TO LOOP, IF, CAN JUMP FROM INNER TO OUTER BLOCK
  SYNTAX:-
    GOTO LABEL_NAME;
*/

DECLARE 
  V_SEARCHED_NUMBER NUMBER:= 23;
  V_IS_PRIME BOOLEAN := TRUE;
BEGIN
  FOR X IN 2..V_SEARCHED_NUMBER-1 LOOP
    IF V_SEARCHED_NUMBER MOD X = 0 THEN
      DBMS_OUTPUT.PUT_LINE(V_SEARCHED_NUMBER || ' NUMBER IS NOT A PRIME NUMBER' );
      V_IS_PRIME := FALSE;
      GOTO END_POINT;
    END IF;
  END LOOP;
    
  IF V_IS_PRIME THEN
     DBMS_OUTPUT.PUT_LINE(V_SEARCHED_NUMBER || ' IS A PRIME NUMBER');
  END IF;
    
  <<END_POINT>>
  DBMS_OUTPUT.PUT_LINE('CHECK COMPLETE');
END;






  
  
